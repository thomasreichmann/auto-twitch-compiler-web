import Head from "next/head";
import channelService, { Channel } from "@/services/channelService";
import { GetServerSideProps } from "next";
import { getServerSession } from "next-auth";
import { authOptions } from "./api/auth/[...nextauth]";
import { youtube_v3 } from "googleapis";
import Paper from "@mui/material/Paper";
import DataCard from "@/components/dataCard";
import AutocompleteSelect, { Option } from "@/components/autocompleteSelect";
import { SyntheticEvent, useEffect, useState } from "react";
import infoService, { AvailableGame } from "@/services/infoService";
import Grid from "@mui/material/Unstable_Grid2"; // Grid version 2

export type HomeProps = {
  channel: youtube_v3.Schema$Channel;
};

type Game = {
  id: string;
  name: string;
};

export default function Home({ channel }: HomeProps) {
  let [selectedGames, setSelectedGames] = useState<Game[]>([]);
  let [availableGames, setAvailableGames] = useState<AvailableGame[]>([]);

  useEffect(() => {
    fetch("/api/info/games")
      .then((res) => res.json())
      .then((data) => setAvailableGames(data));
  }, []);

  const handleGamesChange = (
    event: SyntheticEvent<Element, Event>,
    value: Option | Option[] | null
  ) => {
    if (!Array.isArray(value)) return;

    setSelectedGames(value);
  };

  return (
    <>
      <Head>
        <title>Compiler</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container spacing={3}>
        <Grid xs={6}>
          <Paper elevation={1} sx={{ height: "100%", padding: 3 }}>
            <Grid container>
              <Grid xs={6}>
                <AutocompleteSelect
                  onChange={handleGamesChange}
                  id="games-select"
                  label="Games"
                  placeholder="Games"
                  limitTags={1}
                  options={availableGames}
                  value={selectedGames}
                />
              </Grid>
              <Grid xs={6}>
                <AutocompleteSelect
                  onChange={handleGamesChange}
                  id="games-select"
                  label="Games"
                  options={[]}
                  // value={selectedGames}
                />
              </Grid>
            </Grid>
          </Paper>
        </Grid>
        <Grid xs={6}>
          <Paper elevation={1} sx={{ height: "100%", padding: 3 }}></Paper>
        </Grid>
      </Grid>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<HomeProps> = async (
  context
) => {
  let session = await getServerSession(context.req, context.res, authOptions);
  if (!session) throw new Error("No session found");

  let channel = await channelService.getChannel(session?.account);

  let availableGames = await infoService.getAvailableGames();

  return {
    props: {
      channel,
      availableGames: JSON.parse(JSON.stringify(availableGames)),
    },
  };
};
